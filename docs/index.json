{
  "about/index.html": {
    "href": "about/index.html",
    "title": "",
    "keywords": "该文档由fjqisba个人编写。"
  },
  "HEXRAYSDK/HexRaysSDK.html": {
    "href": "HEXRAYSDK/HexRaysSDK.html",
    "title": "HexRays SDK简介",
    "keywords": "HexRays SDK简介 IDA反编译器Hex-Rays是作为IDA的插件而存在的，它可以将IDA反汇编代码转换成类C语言伪代码。 同时官方还提供了一组HexRays SDK，供用户使用。 SDK使用方法很简单，只需要将hexrays.hpp文件包含即可。"
  },
  "IDASDK/intro.html": {
    "href": "IDASDK/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "IDASDK/结构体和数据类型.html": {
    "href": "IDASDK/结构体和数据类型.html",
    "title": "结构体和数据类型",
    "keywords": "结构体和数据类型 结构体与IDA中的Structures窗口信息有一定关系。 数据类型与IDA中的Local Types窗口信息有一定关系。 add_struc 用于创建结构体。 tid_t add_struc(uval_t idx, const char *name, bool is_union=false); 参数: idx为结构体的索引，参考的结构体列表，代表列表中的顺序，如果idx为-1，表示添加结构体到列表末尾。 name为结构体的名称，不能为不合法名称，也不可以与数据库已有的名称重复。 is_union表示该结构体是否为联合体。 返回值: 返回值tid_t实际上就是个整数，用于标识唯一的结构体类型。如果返回-1，代表创建结构体失败。 get_struc 通过标识符tid_t索引得到对应的结构体类型信息struc_t。 struc_t* get_struc(tid_t id); get_struc_id /get_struc_name 通过结构体的名称来索引得到对应的结构体ID，或者通过结构体ID索引得到结构体的名称。 tid_t get_struc_id(const char *name); qstring get_struc_name(tid_t id); expand_struc 扩充或者收缩一个结构体 bool expand_struc(struc_t *sptr, ea_t offset, adiff_t delta, bool recalc=true); 参数: sptr表示需要执行操作的结构体。 offset表示结构体的偏移。 delta表示要扩充的字节大小，如果为负数则表示要移除的字节大小。 recalc表示是否重新计算结构体类型被使用的地方。 返回值: 返回true表示函数执行成功。 需要注意的是，一个空的结构体是无法执行expand_struc函数的，可以参考以下代码初始化一个结构体 //name为结构体的名称,size为结构体的大小 tid_t CreateStructure(const char* name, int size) { //已存在相同名称的结构体 tid_t structId = get_struc_id(name); if (structId != BADADDR) { return structId; } structId = add_struc(-1, name); if (structId == BADADDR) { return structId; } struc_t* pStruct = get_struc(structId); char fieldName[64] = { 0 }; for (int n = 0; n < size; ++n) { qsnprintf(fieldName, sizeof(fieldName), \"field_%a\", n); add_struc_member(pStruct, fieldName, n, 0, NULL, 1); } return structId; }"
  },
  "index.html": {
    "href": "index.html",
    "title": "IDA插件开发",
    "keywords": "IDA插件开发 IDA插件根据版本来划分，大致可分为6.x和7.x两种版本。 IDA 7.x相较于6.x，有以下几点改动: SDK中的函数有较大变化，函数增加、函数减少、函数名称变化。 原先6.x版本idaq.exe使用32位编译的插件模块，idaq64.exe使用64位编译的插件模块。 现在7.x版本ida.exe和ida64.exe都经64位编译，使用的IDA插件模块也都必须使用64位进行编译。 插件的后缀名不再是plw,p64，统一改成dll。 IDA提供的应用SDK分为IDA SDK和HexRays SDK两种"
  },
  "README.html": {
    "href": "README.html",
    "title": "IDADoc",
    "keywords": "IDADoc 用于存放IDA相关的资料和文档"
  }
}